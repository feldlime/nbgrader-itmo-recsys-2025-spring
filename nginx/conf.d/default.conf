# Define upstream servers
upstream puller {
    server puller:8501;  # Using service name from docker-compose
}

upstream jupyter {
    server nbgrader:9999;  # Using service name from docker-compose
}

upstream oauth2-proxy {
    server oauth2-proxy:4180;  # OAuth2 proxy service
}

# HTTP server (redirect to HTTPS)
server {
    listen 80;
    server_name localhost;
    
    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name localhost;
    
    # SSL configuration
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (uncomment if domain is registered)
    # add_header Strict-Transport-Security "max-age=63072000" always;

    client_max_body_size 20M;  # Allow larger file uploads

    # Streamlit application (GitHub Puller)
    location / {
        auth_request /oauth2/auth;
        auth_request_set $user   $upstream_http_x_auth_request_user;
        auth_request_set $email  $upstream_http_x_auth_request_email;
        auth_request_set $token  $upstream_http_x_auth_request_access_token;

        proxy_set_header X-User  $user;
        proxy_set_header X-Email $email;
        proxy_set_header X-Access-Token $token;

        # If auth fails, redirect to sign-in
        error_page 401 = /oauth2/sign_in;

        proxy_pass http://puller;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
        proxy_buffering off;  # Disable buffering for real-time updates
    }

    location = /jupyter {
        return 301 $scheme://$host/jupyter/;
    }
    # Jupyter Notebook (protected by OAuth2)
    location /jupyter/ {
        auth_request /oauth2/auth;
        auth_request_set $user   $upstream_http_x_auth_request_user;
        auth_request_set $email  $upstream_http_x_auth_request_email;
        auth_request_set $token  $upstream_http_x_auth_request_access_token;

        proxy_set_header X-User  $user;
        proxy_set_header X-Email $email;
        proxy_set_header X-Access-Token $token;

        # If auth fails, redirect to sign-in
        error_page 401 = /oauth2/sign_in;

        proxy_pass http://jupyter;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
        proxy_buffering off;

        proxy_set_header Origin "";
    }

    # OAuth2 endpoints
    location /oauth2/ {
        proxy_pass       http://oauth2-proxy;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
    }

    # OAuth2 authentication request
    location = /oauth2/auth {
        proxy_pass       http://oauth2-proxy;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        # nginx auth_request includes headers but not body
        proxy_set_header Content-Length "";
        proxy_pass_request_body off;
    }

    # Health check endpoint (unprotected)
    location /health {
        access_log off;
        return 200 'healthy\n';
    }
}
